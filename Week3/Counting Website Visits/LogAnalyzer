import java.util.ArrayList;
import java.io.File;
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;

public class LogAnalyzer {
    private ArrayList<LogEntry> records;

    public LogAnalyzer() {
        records = new ArrayList<LogEntry>();
    }

    public void readFile(String filename) {
        try {
            File file = new File(filename);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                LogEntry le = WebLogParser.parseEntry(line);
                if (le != null) {
                    records.add(le);
                }      }
            scanner.close();
        } catch (Exception e) {
            System.out.println("File not found: " + filename);
        }
    }
    public int countUniqueIPs()
    {   ArrayList<String> uniqueIps = new ArrayList<String>();
        for(LogEntry le :records)
        {
            String ipAddress = le.getIpAddress();
            if(!uniqueIps.contains(ipAddress))
            {
             uniqueIps.add(ipAddress);
            }
        }
        return uniqueIps.size();
    }
    
    public int uniqueIPVisitsOnDay(String someday)
    {
        ArrayList<String> uniqueIPs = new ArrayList<>();
        for (LogEntry le : records) {
        String logDate = le.getAccessTime().toString();
        if(logDate.contains(someday))
        {
           String ipAddress = le.getIpAddress();
            if(!uniqueIPs.contains(ipAddress))
            {
             uniqueIPs.add(ipAddress);
            }
        }
        }
        System.out.println(uniqueIPs.size());
        return uniqueIPs.size();
    }
    
    public int countUniqueIPsInRange(int low, int high)
    {
        ArrayList<String> uniqueIPsRange = new ArrayList<>();
        for (LogEntry le : records) {
        int logDate = le.getStatusCode();
        if(logDate>=low && logDate<=high)
        {
           String ipAddress = le.getIpAddress();
            if(!uniqueIPsRange.contains(ipAddress))
            {
             uniqueIPsRange.add(ipAddress);
            }
        }
        }
        System.out.println(uniqueIPsRange.size());
        return uniqueIPsRange.size();
    }
    
    public HashMap<String, Integer> countVisitsPerIP()
    {
        HashMap<String, Integer> counts = new HashMap<String, Integer>();
        for(LogEntry le :records)
        {
            String ipAddress = le.getIpAddress();
            if(!counts.containsKey(ipAddress))
            {
                counts.put(ipAddress,1);
                
            }
            else
            {
              counts.put(ipAddress,counts.get(ipAddress)+1);  
            }
        }
        System.out.println(counts);
        return counts;
        
    }
    public ArrayList<String> iPsMostVisits(HashMap<String, Integer> ipcount)
    {
        ArrayList<String> iPsMostVisitsList = new ArrayList<String>();
        int maxVisit = mostNumberVisitsByIP(ipcount);
        for (Map.Entry<String, Integer> entry : ipcount.entrySet())
        {
            String ip = entry.getKey();
            int visits = entry.getValue();
            if(visits == maxVisit)
            {
                iPsMostVisitsList.add(ip);
            }
        }
        System.out.println(iPsMostVisitsList);
        return iPsMostVisitsList;
    }
    public int mostNumberVisitsByIP(HashMap<String, Integer> ipcount)
    {
        int maxVisit =0;
        for (int value : ipcount.values()) {
        if(maxVisit <= value)
        {
            maxVisit = value;
        }
        }
        return maxVisit;
    }
    public HashMap<String, ArrayList<String>> iPsForDays()
    {

        SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd");
        HashMap<String,ArrayList<String>> ipsFordays = new HashMap<String, ArrayList<String>>();
        for(LogEntry le :records)
        {
            
            String logDate = dateFormat.format(le.getAccessTime());
            String ipAddress = le.getIpAddress();
            if(!ipsFordays.containsKey(logDate))
            {
                ArrayList<String> ipList = new ArrayList<>();
                ipList.add(ipAddress);
                ipsFordays.put(logDate, ipList);
                                
            }
            else
            {
               // ArrayList<String> ipList = ipsFordays.get(logDate);
                //if (!ipList.contains(ipAddress)) 
                    ipsFordays.get(logDate).add(ipAddress);
               
              
            }
        }
        return ipsFordays;
    }
    public String dayWithMostIPVisits(HashMap<String, ArrayList<String>> IpVisits)
    {
        String date ="";
        int max = 0;
        for(String day : IpVisits.keySet())
        {
            ArrayList<String> al = IpVisits.get(day);
            if(al.size()>=max)
            {
                max = al.size();
                date = day;
                
            }
        }
        return date;
    }
    public ArrayList<String> iPsWithMostVisitsOnDay( HashMap<String, ArrayList<String>> ipsfordays, String day)
    {
       ArrayList<String> iPsMostVisitsOnDay = new  ArrayList<String>();
       ArrayList<String> ipList = ipsfordays.get(day);
       if (ipList == null) {
            return iPsMostVisitsOnDay;
       }
       HashMap<String, Integer> counts = new HashMap<String, Integer>();
        for(String ipAddress :ipList)
        {
            if(!counts.containsKey(ipAddress))
            {
                counts.put(ipAddress,1);
                
            }
            else
            {
              counts.put(ipAddress,counts.get(ipAddress)+1);  
            }
        }
       int max = mostNumberVisitsByIP(counts);
       for(String ip : counts.keySet()){
           if(counts.get(ip)==max)
       {
           iPsMostVisitsOnDay.add(ip);
       }
      }
       
       return iPsMostVisitsOnDay;
    }
    public void printAll() {
        for (LogEntry log : records) {
            System.out.println(log);
        }
    }
    
    
}
