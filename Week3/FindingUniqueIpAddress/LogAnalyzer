import java.util.ArrayList;
import java.io.File;
import java.util.Scanner;

public class LogAnalyzer {
    private ArrayList<LogEntry> records;

    public LogAnalyzer() {
        records = new ArrayList<LogEntry>();
    }

    public void readFile(String filename) {
        try {
            File file = new File(filename);
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                LogEntry le = WebLogParser.parseEntry(line);
                if (le != null) {
                    records.add(le);
                }      }
            scanner.close();
        } catch (Exception e) {
            System.out.println("File not found: " + filename);
        }
    }
    public int countUniqueIPs()
    {   ArrayList<String> uniqueIps = new ArrayList<String>();
        for(LogEntry le :records)
        {
            String ipAddress = le.getIpAddress();
            if(!uniqueIps.contains(ipAddress))
            {
             uniqueIps.add(ipAddress);
            }
        }
        return uniqueIps.size();
    }
    
    public int uniqueIPVisitsOnDay(String someday)
    {
        ArrayList<String> uniqueIPs = new ArrayList<>();
        for (LogEntry le : records) {
        String logDate = le.getAccessTime().toString();
        if(logDate.contains(someday))
        {
           String ipAddress = le.getIpAddress();
            if(!uniqueIPs.contains(ipAddress))
            {
             uniqueIPs.add(ipAddress);
            }
        }
        }
        System.out.println(uniqueIPs.size());
        return uniqueIPs.size();
    }
    
    public int countUniqueIPsInRange(int low, int high)
    {
        ArrayList<String> uniqueIPsRange = new ArrayList<>();
        for (LogEntry le : records) {
        int logDate = le.getStatusCode();
        if(logDate>=low && logDate<=high)
        {
           String ipAddress = le.getIpAddress();
            if(!uniqueIPsRange.contains(ipAddress))
            {
             uniqueIPsRange.add(ipAddress);
            }
        }
        }
        System.out.println(uniqueIPsRange.size());
        return uniqueIPsRange.size();
    }
    
    public void printAll() {
        for (LogEntry log : records) {
            System.out.println(log);
        }
    }
}
